# 遊戯王 マスターデュエル戦績トラッカー（ローカル完結）仕様書 v0.3

> **目的**: サーバーを立てずにローカルのみで完結し、プロジェクト（特定期間）ごとの対戦戦績を記録・集計・可視化できるシングルページWebアプリ（SPA）を実装するための仕様。

---

## 0. 全体要件（非機能)

* **配信形態（静的ホスティング）**: GitHub Pages / Cloudflare Pages / Firebase Hosting / 任意のHTTPサーバー等で\*\*静的ファイル（`index.html`・JS・CSS・画像）\*\*のみを配信。**バックエンドは存在しない**。
* **通信ポリシー**: 初回アクセス時に静的アセットを取得した後は**ローカルで完結**。アプリ稼働中（ランタイム）に**外部とのデータ送信は一切行わない**。再読込時も**同一オリジンの静的ファイル取得のみ**。
* **オフライン対応**: Service Worker によるプリキャッシュ/ランタイムキャッシュで「一度開けば機内モードでも動く」ことを保証（PWA化は推奨）。
* **保存先**: 主要データ=IndexedDB、軽量設定=Cookie / localStorage、アセット=Cache Storage（SW）。
* **エクスポート/インポート**: JSONでプロジェクト単位/全体を入出力。
* **ブラウザ対応**: 最新Chromium/Firefox/Safari。レスポンシブ（モバイル優先）。
* **プライバシー**: アナリティクス/外部フォント/CDNへの通信を禁止（必要なライブラリは**バンドル内蔵**）。
* **セキュリティ**: 厳格なCSP例（目安）

  * `default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; connect-src 'none'; frame-ancestors 'none';`
    ※ `connect-src 'none'` でXHR/fetch/websocket等の外部通信を不許可。必要に応じて同一オリジンのみ許可。
* **アクセシビリティ/パフォーマンス/国際化**: 既存記載を踏襲（初期言語=日本語。将来i18n可）。

---

## 1. 用語

* **プロジェクト**: 特定期間（例: ビューリストカップの3日間）における記録の束。期間内の対戦データを集計する単位。
* **デッキ（Deck）**: 自分の使用デッキを登録・管理するエンティティ（名称/タグ/色など）。
* **タグ（Match Tag）**: 対戦に付与する性質・状況ラベル（例: 「手札事故」「プレミ」「接戦」「長期戦」）。**対戦単位**で複数付与可能。
* **対戦（Match）**: 1回のマッチ結果の記録。勝敗、記録時刻、先行/後攻、先行決定の指標値、ポイント、自分/相手のデッキ、レート（任意）、**タグ**などを保持。

---

## 2. 機能要件（概要）

1. **プロジェクト管理**

   * 作成/編集/期間設定/説明文
   * アクティブ切替
   * プロジェクトのJSON入出力

2. **デッキ登録/管理（マスタ）** ⬅️追加/拡充

   * 登録/編集/削除、色・タグ（任意）・メモ・お気に入りフラグ
   * ソート/検索、最近使用した順、クイック選択
   * **エクスポート/インポート**（全デッキ/選択デッキ単位）

3. **対戦記録**

   * 入力フォーム（勝敗、対戦日時、自分デッキ、相手デッキ、先行/後攻、先行決定メモ、ポイント値、レート）
   * **タグ付け（複数）**: 既存タグのサジェスト/新規作成、チップUI、キーボード操作
   * 編集/削除/復元（論理削除）

4. **統計・可視化**（プロジェクト単位）

   * KPI: 総対戦数、勝率、先行率/後攻率、先行時勝率/後攻時勝率
   * 自分デッキ別勝率（棒/テーブル）
   * 相手デッキ分布（円）
   * マッチアップ相性表（自分×相手デッキ）
   * レート推移（折れ線）
   * **タグ別統計** ⬅️追加

     * タグごとの件数・勝率・先行/後攻別勝率
     * タグ×自分デッキの勝率、タグ×相手デッキ分布
     * タグ分布（円/バー）
   * 期間/デッキ/先後/勝敗/**タグ**でのフィルタリング（AND/OR切替）

5. **データ入出力**

   * 全体バックアップ（全プロジェクト + 設定 + **デッキ + タグ**）
   * プロジェクト単体エクスポート/インポート（関連対戦を含む）
   * **デッキ一覧のみエクスポート**（要望対応）
   * スキーマバージョン管理とマイグレーション

6. **設定**

   * タイムゾーン/日時形式、既定の自分デッキ/プロジェクト
   * Cookie同意/チップ表示ON/OFF

## 3. 画面仕様（ワイヤ要約）

* **A. プロジェクト一覧** …（略、既存踏襲）
* **B. プロジェクトダッシュボード**

  * KPI、グラフ（既存）＋ **タグ別統計カード**
  * フィルタ: タグ（複数選択、AND/OR）
* **C. 対戦入力**

  * 既存項目 + **タグ入力**（チップ、オートコンプリート、新規作成）
* **D. デッキ管理**

  * 一覧/検索/新規/編集/削除、色/メモ/お気に入り
  * **エクスポート（JSON）/インポート**
* **E. タグ管理**（任意画面）

  * 一覧/検索/新規/改名/削除、色/説明、使用件数表示
* **F. 設定** …（既存踏襲）

\--- 画面仕様（ワイヤ要約）

* **A. プロジェクト一覧**

  * カード表示 / 新規作成 / インポート / 検索
  * 各カード: 期間・件数・勝率サマリ
* **B. プロジェクトダッシュボード**

  * KPI: 対戦数, 勝率, 先行率/後攻率, 先行時勝率/後攻時勝率
  * グラフ: 相手デッキ分布(円), レート推移(線), 自分デッキ別(棒)
  * マトリクス: 自分デッキ×相手デッキ勝率
  * 絞り込み: 日付範囲/デッキ/先後/勝敗
  * エクスポートボタン
* **C. 対戦入力**

  * 日時(デフォ=現在), 勝敗(Win/Loss), 先行/後攻(トグル), 自分デッキ(選択/新規), 相手デッキ(選択/新規)
  * 先行決定: 方法（コイントス/ダイス/その他テキスト）、**指標値(数値/テキスト)**
  * ポイント値（数値、任意）
  * レート（数値、任意）
  * メモ（任意）
  * 追加/保存/連続追加
* **D. デッキ管理**

  * 一覧/検索/新規/編集/削除
* **E. 設定**

  * 既定値/表示/バックアップ/インポート

---

## 4. データモデル（スキーマ）

> **保存**: IndexedDB（DB名: `md-tracker`, バージョン: `schemaVersion`）。

### 4.1 共通

```json
{
  "schemaVersion": 1,
  "app": {
    "createdAt": "ISO-8601",
    "updatedAt": "ISO-8601"
  }
}
```

### 4.2 Project

```json
{
  "id": "uuid",
  "name": "string",
  "description": "string",
  "period": { "start": "ISO-8601", "end": "ISO-8601" },
  "createdAt": "ISO-8601",
  "updatedAt": "ISO-8601",
  "archived": false
}
```

### 4.3 Deck (master)

```json
{
  "id": "uuid",
  "name": "string",
  "tags": ["string"],
  "color": "#RRGGBB?",
  "favorite": false,
  "note": "string|null",
  "createdAt": "ISO-8601",
  "updatedAt": "ISO-8601"
}
```

### 4.4 Tag (master) ⬅️新規

```json
{
  "id": "uuid",
  "name": "string",          
  "color": "#RRGGBB?",
  "description": "string|null",
  "createdAt": "ISO-8601",
  "updatedAt": "ISO-8601"
}
```

### 4.5 Match

```json
{
  "id": "uuid",
  "projectId": "uuid",
  "playedAt": "ISO-8601",
  "result": "win|loss",
  "turnOrder": "first|second",
  "initiative": { "method": "coin|dice|choice|other", "value": "string|number|null" },
  "points": { "value": "number|null", "note": "string|null" },
  "rate": "number|null",
  "myDeckId": "uuid|null",
  "myDeckName": "string",
  "opDeckName": "string",
  "tags": [
    { "tagId": "uuid|null", "tagName": "string" }
  ],
  "note": "string|null",
  "deleted": false,
  "createdAt": "ISO-8601",
  "updatedAt": "ISO-8601"
}
```

> 備考: タグは**マスタ未登録でも自由入力**可（`tagId=null` で保存）。後からマスタへ昇格・統合可能（正規化機能は将来拡張）。

---

```json
{
  "id": "uuid",
  "projectId": "uuid",
  "playedAt": "ISO-8601",        
  "result": "win|loss",          
  "turnOrder": "first|second",   
  "initiative": {                 
    "method": "coin|dice|choice|other",
    "value": "string|number|null"
  },
  "points": {                     
    "value": "number|null",
    "note": "string|null"
  },
  "rate": "number|null",        
  "myDeckId": "uuid|null",
  "myDeckName": "string",        
  "opDeckName": "string",        
  "note": "string|null",
  "deleted": false,
  "createdAt": "ISO-8601",
  "updatedAt": "ISO-8601"
}
```

> 備考: 自分デッキはマスタ未登録でも自由入力(`myDeckName`)で記録可能。将来、相手デッキをマスタ化する拡張余地あり。

---

## 5. 集計仕様（計算式）

* **総数/勝率/先後率**: 既存式
* **自分デッキ別勝率**: `group by myDeckName`
* **相手デッキ分布**: `group by opDeckName`
* **マッチアップ相性表**: `group by (myDeckName, opDeckName)`
* **レート推移**: `sort by playedAt`（nullはスキップ）
* **タグ別統計（新規）**

  * `group by tagName` → 件数、勝率、先行/後攻別勝率
  * `group by (tagName, myDeckName)` → タグ×自分デッキの勝率
  * `group by (tagName, opDeckName)` → タグ別の相手デッキ分布
  * タグ分布グラフ（円/棒）
* **フィルタ**: タグは AND/OR 切替（UIのトグルで実装）。
* **分母0対策**: N/A表示。

---

## 6. 入力バリデーション

* `playedAt`: 必須、プロジェクト期間内推奨（警告）。
* `result`: 必須（win/loss）。
* `turnOrder`: 必須（first/second）。
* `rate`: 数値/空可、負値禁止。
* `points.value`: 数値/空可、負値禁止。
* `myDeckName`, `opDeckName`: 非空文字列（最大長: 60）。
* **Tag.name**: 非空、最大長: 40（重複は警告/許容は設定次第）。
* **Match.tags**: 重複除去（同一タグ名の多重付与禁止）。

---

## 7. JSONエクスポート/インポート

* **形式（全体）**

```json
{
  "exportedAt": "ISO-8601",
  "schemaVersion": 2,
  "projects": [Project...],
  "decks": [Deck...],
  "tags": [Tag...],
  "matches": [Match...]
}
```

* **粒度**

  * 全体エクスポート（全プロジェクト + 設定 + **全デッキ + 全タグ**）
  * プロジェクト単体エクスポート（対象プロジェクト + 関連対戦、**参照デッキ/タグは名称で埋め込み**）
  * **デッキ一覧のみエクスポート**（要望対応）
* **インポート**

  * `schemaVersion` を確認しマイグレーション（v1→v2で `tags` と `Match.tags` を追加）
  * ID衝突は再採番し参照を更新（`tagName` と `myDeckName` は名称マージのポリシーを設定可能）
* **セキュリティ**: ローカルのみで処理。ドラッグ&ドロップ/ファイル選択をサポート。

---

## 8. Cookie/Storage方針

* **Cookie**: 初回同意、最終使用プロジェクトID、UIヒント既読など軽量フラグ。
* **localStorage**: 表示設定（テーマ、直近フィルタ）。
* **IndexedDB**: 本データ（プロジェクト/デッキ/対戦）。
* **Cache Storage（Service Worker）**: 静的アセットのプリキャッシュ/更新管理（バージョン付き）。

---

## 9. アーキテクチャ（推奨）

* **配信**: **静的ホスティングのみ**（CDN可）。初回ロードで必要アセットを取得。
* **UI**: SPA（Vanilla+Web Components / Reactなど、依存最小）。
* **状態管理**: URLとは独立したローカルストア。
* **データ層**: IndexedDBラッパ（Dexie等も可）。
* **オフライン基盤**: **Service Worker**（Workbox等任意）でプリキャッシュ＋短命アセットのStale-While-Revalidate。キャッシュ破棄は`appVersion`で管理。
* **描画**: 軽量チャート（Canvas/SVG）。
* **CSP/通信遮断**: fetch/XHR/WebSocketは同一オリジンの静的ファイル取得のみ許可。外部ドメインへの送信なし。
* **テスト**: 集計ロジックのユニットテスト、SWのキャッシュ更新の回帰テスト。

---

## 10. 操作フロー

1. プロジェクト作成（期間を設定）a
2. 対戦入力を随時登録（必要に応じてレート/ポイント/メモ）
3. ダッシュボードで統計を確認
4. 大会終了後、プロジェクトJSONをエクスポート（バックアップ）

---

## 11. エッジケース/注意

* 期間外の`playedAt`は許容するが、ダッシュボードの既定表示は期間内のみ（切替可）。
* レート未入力は非連結で描画、凡例注意。
* デッキ名・タグ名の揺れ対策として、**別名マッピング/正規化**を将来拡張に記載（例: 「手札事故」≒「ハンドブリック」）。
* タグの削除時は、参照中の対戦レコードから `tagId` を `null` に落とし `tagName` を残す（履歴保全）。

---

## 12. 将来拡張（非必須）

* 相手プレイヤー識別（匿名ID）
* デッキのバージョン管理（レシピ差分）
* **タグの階層/グループ化、同義語辞書**
* プロジェクト間比較ビュー（タグ条件含む）

---

## 13. 開発タスク（チェックリスト）

* [ ] IndexedDBスキーマv2（Deck/Tag/Match.tags）
* [ ] マイグレーション（v1→v2）
* [ ] デッキCRUD + エクスポート/インポート
* [ ] タグCRUD + オートコンプリート/重複整理
* [ ] 対戦入力フォームのタグ付けUI
* [ ] 統計: タグ別（件数/勝率/先後別/相性）
* [ ] グラフ更新（タグ分布/タグ×デッキ）
* [ ] フィルタ（タグAND/OR）
* [ ] 全体/プロジェクト/デッキ単体のJSON I/O
* [ ] ユニットテスト/簡易E2E
